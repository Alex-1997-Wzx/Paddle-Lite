#pragma
#ifdef PADDLE_MOBILE_CL

#include <string>

namespace paddle_mobile {
extern const std::string yolonano_kernel = "#pragma once\n"
                                           "#pragma OPENCL EXTENSION cl_khr_fp16 : enable\n"
                                           "\n"
                                           "inline half4 activation(half4 in\n"
                                           "#ifdef PRELU\n"
                                           ",\n"
                                           "                        half4 prelu_alpha\n"
                                           "#endif\n"
                                           ") {\n"
                                           "  half4 output;\n"
                                           "#ifdef PRELU\n"
                                           "  output = select(prelu_alpha * in, in, in >= (half4)0.0);\n"
                                           "#endif\n"
                                           "\n"
                                           "#ifdef RELU\n"
                                           "  output = fmax(in, (half4)(0.0f));\n"
                                           "#endif\n"
                                           "  return output;\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void feed(__global float *in,\n"
                                           "                   __write_only image2d_t output_image,\n"
                                           "                   __private const int out_H,\n"
                                           "                   __private const int out_W,\n"
                                           "                   __private const int out_C,\n"
                                           "                   __private const int Stride0,\n"
                                           "                   __private const int Stride1,\n"
                                           "                   __private const int Stride2) {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "  const int out_n = out_nh/out_H;\n"
                                           "  const int out_h = out_nh%out_H;\n"
                                           "\n"
                                           "  const int in_n = out_n;\n"
                                           "  const int in_c0 = out_c * 4 + 0;\n"
                                           "  const int in_c1 = out_c * 4 + 1;\n"
                                           "  const int in_c2 = out_c * 4 + 2;\n"
                                           "  const int in_c3 = out_c * 4 + 3;\n"
                                           "  const int in_h = out_h;\n"
                                           "  const int in_w = out_w;\n"
                                           "\n"
                                           "\n"
                                           "  int input_pos0 = in_n * Stride2 + in_c0 * Stride1 + in_h * Stride0 + in_w;\n"
                                           "  int input_pos1 = in_n * Stride2 + in_c1 * Stride1 + in_h * Stride0 + in_w;\n"
                                           "  int input_pos2 = in_n * Stride2 + in_c2 * Stride1 + in_h * Stride0 + in_w;\n"
                                           "  int input_pos3 = in_n * Stride2 + in_c3 * Stride1 + in_h * Stride0 + in_w;\n"
                                           "\n"
                                           "  int2 output_pos;\n"
                                           "  output_pos.x = out_c * out_W + out_w;\n"
                                           "  output_pos.y = out_nh;\n"
                                           "\n"
                                           "  half4 output = (half4)0.0f;\n"
                                           "  output.x = convert_half(in[input_pos0]);\n"
                                           "  if(out_C - 4 * out_c>=2){\n"
                                           "    output.y = convert_half(in[input_pos1]);\n"
                                           "  }\n"
                                           "  if(out_C - 4 * out_c>=3){\n"
                                           "    output.z = convert_half(in[input_pos2]);\n"
                                           "  }\n"
                                           "  if(out_C - 4 * out_c>=4){\n"
                                           "    output.w = convert_half(in[input_pos3]);\n"
                                           "  }\n"
                                           "  write_imageh(output_image, output_pos, output);\n"
                                           "\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void fetch(__private const int in_height,\n"
                                           "                    __private const int in_width,\n"
                                           "                    __read_only image2d_t input,\n"
                                           "                    __global float* out,\n"
                                           "                    __private const int size_ch,\n"
                                           "                    __private const int size_block,\n"
                                           "                    __private const int size_batch,\n"
                                           "                    __private const int C) {\n"
                                           "  const int in_c = get_global_id(0);\n"
                                           "  const int in_w = get_global_id(1);\n"
                                           "  const int in_nh = get_global_id(2);\n"
                                           "  const int in_n = in_nh / in_height;\n"
                                           "  const int in_h = in_nh % in_height;\n"
                                           "\n"
                                           "  const sampler_t sampler =\n"
                                           "          CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  const int pos_x = mad24(in_c, in_width, in_w);\n"
                                           "  half4 in = read_imageh(input, sampler, (int2)(pos_x, in_nh));\n"
                                           "\n"
                                           "  const int index = in_n * size_batch + in_c * size_block + in_h * in_width + in_w;\n"
                                           "  out[index] = convert_float(in.x);\n"
                                           "  if(C - 4 * in_c>=2){\n"
                                           "    out[index + size_ch] = convert_float(in.y);\n"
                                           "  }\n"
                                           "  if(C - 4 * in_c>=3){\n"
                                           "    out[index + size_ch * 2] = convert_float(in.z);\n"
                                           "  }\n"
                                           "\n"
                                           "  if(C - 4 * in_c>=4){\n"
                                           "    out[index + size_ch * 3] = convert_float(in.w);\n"
                                           "  }\n"
                                           "\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void scale(__read_only image2d_t input,\n"
                                           "                    __write_only image2d_t output,\n"
                                           "                    __private float scale,\n"
                                           "                    __private float bias,\n"
                                           "                    __private int out_width) {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int pos_x = mad24(out_c, out_width, out_w);\n"
                                           "  half4 in = read_imageh(input, sampler, (int2)(pos_x, out_nh));\n"
                                           "  in = convert_half(scale) * in + convert_half(bias);\n"
                                           "  write_imageh(output, (int2)(pos_x, out_nh), in);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void sigmoid(__read_only image2d_t input,\n"
                                           "                      __write_only image2d_t output) {\n"
                                           "\n"
                                           "  const int x = get_global_id(0);\n"
                                           "  const int y = get_global_id(1);\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  half4 in = read_imageh(input, sampler, (int2)(x, y));\n"
                                           "  half4 out;\n"
                                           "  out.x = 1.0 / (1.0 + pow(2.71828182, -1.0 * (float)(in.x)));\n"
                                           "  out.y = 1.0 / (1.0 + pow(2.71828182, -1.0 * (float)(in.y)));\n"
                                           "  out.z = 1.0 / (1.0 + pow(2.71828182, -1.0 * (float)(in.z)));\n"
                                           "  out.w = 1.0 / (1.0 + pow(2.71828182, -1.0 * (float)(in.w)));\n"
                                           "  write_imageh(output, (int2)(x, y), out);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void relu6(__read_only image2d_t input,\n"
                                           "                    __write_only image2d_t output,\n"
                                           "                    __private const float threshold) {\n"
                                           "\n"
                                           "  const int x = get_global_id(0);\n"
                                           "  const int y = get_global_id(1);\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  half4 in = read_imageh(input, sampler, (int2)(x, y));\n"
                                           "  in = max((half4)(0.0f, 0.0f, 0.0f, 0.0f), in);\n"
                                           "  in = min((half4)(threshold, threshold, threshold, threshold), in);\n"
                                           "  write_imageh(output, (int2)(x, y), in);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void relu(__read_only image2d_t input,\n"
                                           "                   __write_only image2d_t output){\n"
                                           "\n"
                                           "  const int x = get_global_id(0);\n"
                                           "  const int y = get_global_id(1);\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  half4 in = read_imageh(input, sampler, (int2)(x, y));\n"
                                           "  in = max((half4)(0.0f, 0.0f, 0.0f, 0.0f), in);\n"
                                           "  write_imageh(output, (int2)(x, y), in);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void channel_mul(__global image2d_t input, __global image2d_t bias,__write_only\n"
                                           "image2d_t outputImage, int w) {\n"
                                           "  int x = get_global_id(0);\n"
                                           "  int y = get_global_id(1);\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "  int2 coords;\n"
                                           "  coords.x = x;\n"
                                           "  coords.y = y;\n"
                                           "  int2 coords_bias;\n"
                                           "  coords_bias.x = x/w;\n"
                                           "  coords_bias.y = 0;\n"
                                           "  half4 in = read_imageh(input, sampler, coords);\n"
                                           "  half4 biase = read_imageh(bias, sampler, coords_bias);\n"
                                           "  half4 output = in * biase;\n"
                                           "  write_imageh(outputImage,coords,output);\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void reshape(__read_only image2d_t input_image,\n"
                                           "                      __write_only image2d_t output_image,\n"
                                           "                      __private const int out_C,\n"
                                           "                      __private const int out_H,\n"
                                           "                      __private const int out_W,\n"
                                           "                      __private const int in_W,\n"
                                           "                      __private const int in_H,\n"
                                           "                      __private const int in_Stride0,\n"
                                           "                      __private const int in_Stride1,\n"
                                           "                      __private const int in_Stride2,\n"
                                           "                      __private const int out_Stride0,\n"
                                           "                      __private const int out_Stride1,\n"
                                           "                      __private const int out_Stride2) {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "  const int out_n = out_nh/out_H;\n"
                                           "  const int out_h = out_nh%out_H;\n"
                                           "  const int out_c0 = out_c * 4;\n"
                                           "  const int out_c1 = out_c * 4 + 1;\n"
                                           "  const int out_c2 = out_c * 4+ 2;\n"
                                           "  const int out_c3 = out_c * 4+ 3;\n"
                                           "\n"
                                           "  int count0 =  out_n * out_Stride2 + out_c0 * out_Stride1 + out_h * out_Stride0 + out_w;\n"
                                           "  int count1 =  out_n * out_Stride2 + out_c1 * out_Stride1 + out_h * out_Stride0 + out_w;\n"
                                           "  int count2 =  out_n * out_Stride2 + out_c2 * out_Stride1 + out_h * out_Stride0 + out_w;\n"
                                           "  int count3 =  out_n * out_Stride2 + out_c3 * out_Stride1 + out_h * out_Stride0 + out_w;\n"
                                           "\n"
                                           "  int in_n0 = count0/in_Stride2;\n"
                                           "  int in_n1 = count1/in_Stride2;\n"
                                           "  int in_n2 = count1/in_Stride2;\n"
                                           "  int in_n3 = count2/in_Stride2;\n"
                                           "\n"
                                           "  count0 = count0%in_Stride2;\n"
                                           "  count1 = count1%in_Stride2;\n"
                                           "  count2 = count2%in_Stride2;\n"
                                           "  count3 = count3%in_Stride2;\n"
                                           "\n"
                                           "  int in_c0 = count0/in_Stride1;\n"
                                           "  int in_c1 = count1/in_Stride1;\n"
                                           "  int in_c2 = count2/in_Stride1;\n"
                                           "  int in_c3 = count3/in_Stride1;\n"
                                           "\n"
                                           "  int in_h0 = (count0%in_Stride1)/in_Stride0;\n"
                                           "  int in_h1 = (count1%in_Stride1)/in_Stride0;\n"
                                           "  int in_h2 = (count2%in_Stride1)/in_Stride0;\n"
                                           "  int in_h3 = (count3%in_Stride1)/in_Stride0;\n"
                                           "\n"
                                           "  int in_w0 = (count0%in_Stride1)%in_Stride0;\n"
                                           "  int in_w1 = (count1%in_Stride1)%in_Stride0;\n"
                                           "  int in_w2 = (count2%in_Stride1)%in_Stride0;\n"
                                           "  int in_w3 = (count3%in_Stride1)%in_Stride0;\n"
                                           "\n"
                                           "\n"
                                           "  int2 input_pos0;\n"
                                           "  int2 input_pos1;\n"
                                           "  int2 input_pos2;\n"
                                           "  int2 input_pos3;\n"
                                           "\n"
                                           "  input_pos0.x = (in_c0/4) * in_W + in_w0;\n"
                                           "  input_pos0.y = in_n0 * in_H + in_h0;\n"
                                           "\n"
                                           "  input_pos1.x = (in_c1/4) * in_W + in_w1;\n"
                                           "  input_pos1.y = in_n1 * in_H + in_h1;\n"
                                           "\n"
                                           "  input_pos2.x = (in_c2/4) * in_W + in_w2;\n"
                                           "  input_pos2.y = in_n2 * in_H + in_h2;\n"
                                           "\n"
                                           "  input_pos3.x = (in_c3/4) * in_W + in_w3;\n"
                                           "  input_pos3.y = in_n3 * in_H + in_h3;\n"
                                           "\n"
                                           "  int2 output_pos;\n"
                                           "  output_pos.x = out_c * out_W + out_w;\n"
                                           "  output_pos.y = out_nh;\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP      |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  half4 input0;\n"
                                           "  half4 input1;\n"
                                           "  half4 input2;\n"
                                           "  half4 input3;\n"
                                           "  half4 output;\n"
                                           "\n"
                                           "  input0 = read_imageh(input_image, sampler,input_pos0);\n"
                                           "  if(in_c0%4==0){\n"
                                           "    output.x = input0.x;\n"
                                           "  }else if(in_c0%4==1){\n"
                                           "    output.x = input0.y;\n"
                                           "  }else if(in_c0%4==2){\n"
                                           "    output.x = input0.z;\n"
                                           "  }else{\n"
                                           "    output.x = input0.w;\n"
                                           "  }\n"
                                           "  if(out_C - out_c * 4>=2){\n"
                                           "    input1 = read_imageh(input_image, sampler,input_pos1);\n"
                                           "    if(in_c1%4==0){\n"
                                           "      output.y = input1.x;\n"
                                           "    }else if(in_c1%4==1){\n"
                                           "      output.y = input1.y;\n"
                                           "    }else if(in_c1%4==2){\n"
                                           "      output.y = input1.z;\n"
                                           "    }else{\n"
                                           "      output.y = input1.w;\n"
                                           "    }\n"
                                           "\n"
                                           "  }else{\n"
                                           "    output.y = 0.0f;\n"
                                           "  }\n"
                                           "\n"
                                           "  if(out_C - out_c * 4>=3){\n"
                                           "    input2 = read_imageh(input_image, sampler,input_pos2);\n"
                                           "\n"
                                           "    if(in_c2%4==0){\n"
                                           "      output.z = input2.x;\n"
                                           "    }else if(in_c2%4==1){\n"
                                           "      output.z = input1.y;\n"
                                           "    }else if(in_c2%4==2){\n"
                                           "      output.z = input2.z;\n"
                                           "    }else{\n"
                                           "      output.z = input2.w;\n"
                                           "    }\n"
                                           "  }else{\n"
                                           "    output.z = 0.0f;\n"
                                           "  }\n"
                                           "\n"
                                           "  if(out_C - out_c * 4>=4){\n"
                                           "    input3 = read_imageh(input_image, sampler,input_pos3);\n"
                                           "    if(in_c3%4==0){\n"
                                           "      output.w = input3.x;\n"
                                           "    }else if(in_c3%4==1){\n"
                                           "      output.w = input3.y;\n"
                                           "    }else if(in_c3%4==2){\n"
                                           "      output.w = input3.z;\n"
                                           "    }else{\n"
                                           "      output.w = input3.w;\n"
                                           "    }\n"
                                           "  }else{\n"
                                           "    output.w = 0.0f;\n"
                                           "  }\n"
                                           "\n"
                                           "  write_imageh(output_image, output_pos, output);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void nearest_interp(__read_only image2d_t input, __write_only image2d_t output,\n"
                                           "                             __private const float scale_h, __private const float scale_w,\n"
                                           "                             __private const int in_dims_h, __private const int out_dims_h,\n"
                                           "                             __private const int in_dims_w, __private const int out_dims_w) {\n"
                                           "  const int c = get_global_id(0);\n"
                                           "  const int w = get_global_id(1);\n"
                                           "  const int nh = get_global_id(2);\n"
                                           "  int2 output_pos;\n"
                                           "  output_pos.x = c * out_dims_w + w;\n"
                                           "  output_pos.y = nh;\n"
                                           "  int out_n = nh / out_dims_h;\n"
                                           "  int out_h = nh % out_dims_h;\n"
                                           "  int2 input_pos;\n"
                                           "  input_pos.x = c * in_dims_w + w / scale_w;\n"
                                           "  input_pos.y = out_n * in_dims_h + out_h / scale_h;\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "  half4 input_data = read_imageh(input, sampler, (int2)(input_pos.x, input_pos.y));\n"
                                           "  write_imageh(output, (int2)(output_pos.x , output_pos.y), input_data);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void elementwise_add(__global image2d_t input, __global image2d_t bias,__write_only image2d_t outputImage) {\n"
                                           "  int x = get_global_id(0);\n"
                                           "  int y = get_global_id(1);\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "  int2 coords;\n"
                                           "  coords.x = x;\n"
                                           "  coords.y = y;\n"
                                           "  half4 in = read_imageh(input, sampler, coords);\n"
                                           "  half4 biase = read_imageh(bias, sampler, coords);\n"
                                           "  half4 output = in + biase;\n"
                                           "  write_imageh(outputImage,coords,output);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void channel_add(__global image2d_t input, __global image2d_t bias,__write_only image2d_t outputImage,int w) {\n"
                                           "  int x = get_global_id(0);\n"
                                           "  int y = get_global_id(1);\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "  int2 coords;\n"
                                           "  coords.x = x;\n"
                                           "  coords.y = y;\n"
                                           "  int2 coords_bias;\n"
                                           "  coords_bias.x = x/w;\n"
                                           "  coords_bias.y = 0;\n"
                                           "  half4 in = read_imageh(input, sampler, coords);\n"
                                           "  half4 biase = read_imageh(bias, sampler, coords_bias);\n"
                                           "  half4 output = in + biase;\n"
                                           "  write_imageh(outputImage,coords,output);\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void concatByW(__read_only image2d_t input_image,\n"
                                           "                        __write_only image2d_t output_image,\n"
                                           "                        __private const int in_W,\n"
                                           "                        __private const int pre_Width,\n"
                                           "                        __private const int out_Width) {\n"
                                           "\n"
                                           "  const int in_c = get_global_id(0);\n"
                                           "  const int in_w = get_global_id(1);\n"
                                           "  const int in_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int2 input_pos;\n"
                                           "  input_pos.x = in_c * in_W + in_w;\n"
                                           "  input_pos.y = in_nh;\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "  half4 input;\n"
                                           "  input = read_imageh(input_image, sampler,input_pos);\n"
                                           "\n"
                                           "  int2 output_pos;\n"
                                           "  output_pos.x = input_pos.x + pre_Width + out_Width * in_c;\n"
                                           "  output_pos.y = input_pos.y;\n"
                                           "  write_imageh(output_image, output_pos, input);\n"
                                           "\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void concatByH(__read_only image2d_t input_image,\n"
                                           "                        __write_only image2d_t output_image,\n"
                                           "                        __private const int out_W,\n"
                                           "                        __private const int out_H_Start) {\n"
                                           "\n"
                                           "  const int in_c = get_global_id(0);\n"
                                           "  const int in_w = get_global_id(1);\n"
                                           "  const int in_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int2 input_pos;\n"
                                           "  input_pos.x = in_c * out_W + in_w;\n"
                                           "  input_pos.y = in_nh;\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "  half4 input;\n"
                                           "  input = read_imageh(input_image, sampler,input_pos);\n"
                                           "\n"
                                           "  int2 output_pos;\n"
                                           "  output_pos.x = input_pos.x;\n"
                                           "  output_pos.y = out_H_Start + input_pos.y;\n"
                                           "\n"
                                           "  write_imageh(output_image, output_pos, input);\n"
                                           "\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void concatByCWith2Inputs(__read_only image2d_t input_image_0,\n"
                                           "                                   __read_only image2d_t input_image_1,\n"
                                           "                                   __private const int C_0,\n"
                                           "                                   __private const int C_1,\n"
                                           "                                   __write_only image2d_t output_image,\n"
                                           "                                   __private const int out_C,\n"
                                           "                                   __private const int out_W) {\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int2 output_pos;\n"
                                           "  output_pos.x = out_c * out_W + out_w;\n"
                                           "  output_pos.y = out_nh;\n"
                                           "  half4 output_data;\n"
                                           "\n"
                                           "  for (int i = 0; i < 4; i++) {\n"
                                           "    int c = out_c * 4 + i;\n"
                                           "    if (c >= out_C) {\n"
                                           "      break;\n"
                                           "    }\n"
                                           "    int c_in;\n"
                                           "    half4 input_data;\n"
                                           "    if (c < C_0) {\n"
                                           "      c_in = c;\n"
                                           "      int2 input_pos;\n"
                                           "      input_pos.x = (c_in / 4) * out_W + out_w;\n"
                                           "      input_pos.y = out_nh;\n"
                                           "      input_data = read_imageh(input_image_0, sampler, input_pos);\n"
                                           "    } else {\n"
                                           "      c_in = c - C_0;\n"
                                           "      int2 input_pos;\n"
                                           "      input_pos.x = (c_in / 4) * out_W + out_w;\n"
                                           "      input_pos.y = out_nh;\n"
                                           "      input_data = read_imageh(input_image_1, sampler, input_pos);\n"
                                           "    }\n"
                                           "    int value_offset = c_in % 4;\n"
                                           "    float value;\n"
                                           "    if (value_offset == 0) {\n"
                                           "      value = input_data.x;\n"
                                           "    } else if (value_offset == 1) {\n"
                                           "      value = input_data.y;\n"
                                           "    } else if (value_offset == 2) {\n"
                                           "      value = input_data.z;\n"
                                           "    } else if (value_offset == 3) {\n"
                                           "      value = input_data.w;\n"
                                           "    }\n"
                                           "    if (i == 0) {\n"
                                           "      output_data.x = value;\n"
                                           "    } else if (i == 1) {\n"
                                           "      output_data.y = value;\n"
                                           "    } else if (i == 2) {\n"
                                           "      output_data.z = value;\n"
                                           "    } else if (i == 3) {\n"
                                           "      output_data.w = value;\n"
                                           "    }\n"
                                           "  }\n"
                                           "  write_imageh(output_image, output_pos, output_data);\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void pool_avg(\n"
                                           "        __private const int in_height, __private const int in_width,\n"
                                           "        __private const int out_height, __private const int out_width,\n"
                                           "        __private const int pad_top, __private const int pad_left,\n"
                                           "        __private const int stride_h, __private const int stride_w,\n"
                                           "        __private const int ksize_h, __private const int ksize_w,\n"
                                           "        __read_only image2d_t input, __write_only image2d_t output) {\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "  const int out_n = out_nh / out_height;\n"
                                           "  const int out_h = out_nh % out_height;\n"
                                           "\n"
                                           "  const sampler_t sampler =\n"
                                           "          CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int start_h = out_h * stride_h - pad_top;\n"
                                           "  int end_h = min(start_h + ksize_h, in_height);\n"
                                           "  start_h = max(start_h, 0);\n"
                                           "\n"
                                           "  int start_w = out_w * stride_w - pad_left;\n"
                                           "  int end_w = min(start_w + ksize_w, in_width);\n"
                                           "  start_w = max(start_w, 0);\n"
                                           "\n"
                                           "  const int pos_in_x = out_c * in_width;\n"
                                           "  const int pos_in_y = out_n * in_height;\n"
                                           "  half4 sum = (half4)(0.0f);\n"
                                           "  int num = 0 ;\n"
                                           "  for (int y = start_h; y < end_h; ++y) {\n"
                                           "    for (int x = start_w; x < end_w; ++x) {\n"
                                           "      sum += read_imageh(input, sampler, (int2)(pos_in_x + x, pos_in_y + y));\n"
                                           "    }\n"
                                           "  }\n"
                                           "\n"
                                           "  num = ksize_w * ksize_h;\n"
                                           "  half4 avg = sum / num;\n"
                                           "\n"
                                           "  const int pos_out_x = mad24(out_c, out_width, out_w);\n"
                                           "  write_imageh(output, (int2)(pos_out_x, out_nh), avg);\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void depth_conv_3x3s1_DBIASE_CH(__private const int ou_ch_blk,\n"
                                           "                               __private const int ou_w_blk,\n"
                                           "                               __private const int ou_nh,\n"
                                           "                               __read_only image2d_t input,\n"
                                           "                               __read_only image2d_t filter,\n"
                                           "#if defined(BIASE_CH) || defined(BIASE_ELE)\n"
                                           "        __read_only image2d_t bias,\n"
                                           "#endif\n"
                                           "#ifdef BATCH_NORM\n"
                                           "__read_only image2d_t new_scale,\n"
                                           "                                              __read_only image2d_t new_biase,\n"
                                           "#endif\n"
                                           "                               __write_only image2d_t output_image,\n"
                                           "                               __private const int stride,\n"
                                           "                               __private const int pad,\n"
                                           "                               __private const int dilation,\n"
                                           "                               __private const int in_ch,\n"
                                           "                               __private const int in_w,/* of one block */\n"
                                           "                               __private const int in_h, /* of one block */\n"
                                           "                               __private const int ou_w,\n"
                                           "                               __private const int ou_h) {\n"
                                           "\n"
                                           "  const int ou_ch_blk_id = get_global_id(0);\n"
                                           "  const int ou_w_blk_id = get_global_id(1);\n"
                                           "  const int ou_nh_id = get_global_id(2);\n"
                                           "  const int w_blk_size = 2;\n"
                                           "\n"
                                           "  const int batch_id = ou_nh_id / ou_h;\n"
                                           "  int ou_col_id = ou_w_blk_id * w_blk_size;\n"
                                           "  int ou_row_id = ou_nh_id % ou_h;\n"
                                           "  int ou_x = mad24(ou_ch_blk_id, ou_w, ou_col_id);\n"
                                           "\n"
                                           "  // input pos in one block and on batch\n"
                                           "  int col_id = ou_col_id - pad;\n"
                                           "  int row_id = ou_row_id - pad;\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP          |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "#ifdef BIASE_CH\n"
                                           "  half4 output[2];\n"
                                           "    output[0] = read_imageh(bias, sampler, (int2)(ou_ch_blk_id, 0));\n"
                                           "    output[1] = output[0];\n"
                                           "#elif defined(BIASE_ELE)\n"
                                           "  half4 output[2];\n"
                                           "    output[0] = read_imageh(bias, sampler, (int2)(ou_x, ou_nh_id));\n"
                                           "    if (ou_col_id + 1 < ou_w) {\n"
                                           "        output[1] = read_imageh(bias, sampler, (int2)(ou_x + 1, ou_nh_id));\n"
                                           "    }\n"
                                           "#else\n"
                                           "  half4 output[2] = {0.0f};\n"
                                           "#endif\n"
                                           "\n"
                                           "  half4 inputs[12];\n"
                                           "\n"
                                           "  int filter_x = ou_ch_blk_id * 3;\n"
                                           "  int filter_y = 0;\n"
                                           "  half4 filters[9];\n"
                                           "  filters[0] =  read_imageh(filter, sampler,(int2)(filter_x,filter_y));\n"
                                           "  filters[1] =  read_imageh(filter, sampler,(int2)(filter_x + 1,filter_y));\n"
                                           "  filters[2] =  read_imageh(filter, sampler,(int2)(filter_x + 2,filter_y));\n"
                                           "\n"
                                           "  int in_x = mad24(ou_ch_blk_id, in_w, col_id);\n"
                                           "  int in_y = mad24(batch_id, in_h, row_id);\n"
                                           "\n"
                                           "  int y0 = select(in_y, -1, row_id < 0 || row_id >= in_h);\n"
                                           "  int x0 = select(in_x, -1, col_id < 0 || col_id >= in_w);\n"
                                           "  inputs[0] = read_imageh(input, sampler, (int2)(x0, y0));\n"
                                           "  int x1 = select(in_x + 1, -1, col_id + 1 < 0 || col_id + 1 >= in_w);\n"
                                           "  inputs[1] = read_imageh(input, sampler, (int2)(x1, y0));\n"
                                           "  int x2 = select(in_x + 2, -1, col_id + 2 < 0 || col_id + 2 >= in_w);\n"
                                           "  inputs[2] = read_imageh(input, sampler, (int2)(x2, y0));\n"
                                           "  int x3 = select(in_x + 3, -1, col_id + 3 < 0 || col_id + 3 >= in_w);\n"
                                           "  inputs[3] = read_imageh(input, sampler, (int2)(x3, y0));\n"
                                           "\n"
                                           "  output[0] = mad(inputs[0], filters[0], output[0]);\n"
                                           "  output[1] = mad(inputs[1], filters[0], output[1]);\n"
                                           "\n"
                                           "  output[0] = mad(inputs[1], filters[1], output[0]);\n"
                                           "  output[1] = mad(inputs[2], filters[1], output[1]);\n"
                                           "\n"
                                           "  output[0] = mad(inputs[2], filters[2], output[0]);\n"
                                           "  output[1] = mad(inputs[3], filters[2], output[1]);\n"
                                           "\n"
                                           "\n"
                                           "  filters[3] =  read_imageh(filter, sampler,(int2)(filter_x,filter_y + 1));\n"
                                           "  filters[4] =  read_imageh(filter, sampler,(int2)(filter_x + 1,filter_y + 1));\n"
                                           "  filters[5] =  read_imageh(filter, sampler,(int2)(filter_x + 2,filter_y + 1));\n"
                                           "\n"
                                           "\n"
                                           "  int y1 = select(in_y + 1, -1, row_id + 1 < 0 || row_id + 1 >= in_h);\n"
                                           "  inputs[4] = read_imageh(input, sampler, (int2)(x0, y1));\n"
                                           "  inputs[5] = read_imageh(input, sampler, (int2)(x1, y1));\n"
                                           "  inputs[6] = read_imageh(input, sampler, (int2)(x2, y1));\n"
                                           "  inputs[7] = read_imageh(input, sampler, (int2)(x3, y1));\n"
                                           "\n"
                                           "\n"
                                           "  output[0] = mad(inputs[4], filters[3], output[0]);\n"
                                           "  output[1] = mad(inputs[5], filters[3], output[1]);\n"
                                           "\n"
                                           "  output[0] = mad(inputs[5], filters[4], output[0]);\n"
                                           "  output[1] = mad(inputs[6], filters[4], output[1]);\n"
                                           "\n"
                                           "  output[0] = mad(inputs[6], filters[5], output[0]);\n"
                                           "  output[1] = mad(inputs[7], filters[5], output[1]);\n"
                                           "\n"
                                           "\n"
                                           "  filters[6] =  read_imageh(filter, sampler,(int2)(filter_x,filter_y + 2));\n"
                                           "  filters[7] =  read_imageh(filter, sampler,(int2)(filter_x + 1,filter_y + 2));\n"
                                           "  filters[8] =  read_imageh(filter, sampler,(int2)(filter_x + 2,filter_y + 2));\n"
                                           "\n"
                                           "  int y2 = select(in_y + 2, -1, row_id + 2 < 0 || row_id + 2 >= in_h);\n"
                                           "  inputs[8] = read_imageh(input, sampler, (int2)(x0, y2));\n"
                                           "  inputs[9] = read_imageh(input, sampler, (int2)(x1, y2));\n"
                                           "  inputs[10] = read_imageh(input, sampler, (int2)(x2, y2));\n"
                                           "  inputs[11] = read_imageh(input, sampler, (int2)(x3, y2));\n"
                                           "\n"
                                           "\n"
                                           "  output[0] = mad(inputs[8], filters[6], output[0]);\n"
                                           "  output[1] = mad(inputs[9], filters[6], output[1]);\n"
                                           "\n"
                                           "  output[0] = mad(inputs[9], filters[7], output[0]);\n"
                                           "  output[1] = mad(inputs[10], filters[7], output[1]);\n"
                                           "\n"
                                           "  output[0] = mad(inputs[10], filters[8], output[0]);\n"
                                           "  output[1] = mad(inputs[11], filters[8], output[1]);\n"
                                           "#ifdef BATCH_NORM\n"
                                           "  half4 scale = read_imageh(new_scale, sampler, (int2)(ou_ch_blk_id, 0));\n"
                                           "    half4 biase = read_imageh(new_biase, sampler, (int2)(ou_ch_blk_id, 0));\n"
                                           "    output[0] = mad(scale, output[0], biase);\n"
                                           "    if (ou_col_id + 1 < ou_w) {\n"
                                           "        output[1] = mad(scale, output[1], biase);\n"
                                           "    }\n"
                                           "#endif\n"
                                           "\n"
                                           "  write_imageh(output_image, (int2)(ou_x, ou_nh_id), output[0]);\n"
                                           "  if (ou_col_id + 1 < ou_w) {\n"
                                           "    write_imageh(output_image, (int2)(ou_x + 1, ou_nh_id), output[1]);\n"
                                           "  }\n"
                                           "\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void depth_conv_3x3_DBIASE_CH(__private const int global_size_dim0,\n"
                                           "                             __private const int global_size_dim1,\n"
                                           "                             __private const int global_size_dim2,\n"
                                           "                             __read_only image2d_t input,\n"
                                           "                             __read_only image2d_t filter,\n"
                                           "#if defined(BIASE_CH) || defined(BIASE_ELE)\n"
                                           "        __read_only image2d_t bias,\n"
                                           "#endif\n"
                                           "#ifdef BATCH_NORM\n"
                                           "__read_only image2d_t new_scale,\n"
                                           "                                              __read_only image2d_t new_biase,\n"
                                           "#endif\n"
                                           "                             __write_only image2d_t output_image,\n"
                                           "                             __private const int stride,\n"
                                           "                             __private const int offset,\n"
                                           "                             __private const int input_c,\n"
                                           "                             __private const int dilation,\n"
                                           "                             __private const int input_width,/* of one block */\n"
                                           "                             __private const int input_height, /* of one block */\n"
                                           "                             __private const int output_width,\n"
                                           "                             __private const int output_height) {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int2 output_pos = (int2)(out_c * global_size_dim1 + out_w, out_nh);\n"
                                           "\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP          |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  const int batch_index = out_nh / output_height;\n"
                                           "\n"
                                           "  const int out_nh_in_one_batch = out_nh % output_height;\n"
                                           "\n"
                                           "\n"
                                           "  int2 stride_xy = (int2)(stride, stride);\n"
                                           "  int2 ouput_pos_in_one_block = (int2)(out_w, out_nh_in_one_batch);\n"
                                           "\n"
                                           "  int2 in_pos_in_one_block = ouput_pos_in_one_block * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "#ifdef BIASE_CH\n"
                                           "  half4 output = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "#elif defined(BIASE_ELE)\n"
                                           "  half4 output = read_imageh(bias, sampler, output_pos);\n"
                                           "#else\n"
                                           "  half4 output = 0.0f;\n"
                                           "#endif\n"
                                           "\n"
                                           "  const int filter_width = 3;\n"
                                           "  const int filter_height = 3;\n"
                                           "\n"
                                           "  int2 pos_in_input_block = (int2)(out_c * input_width, batch_index * input_height);\n"
                                           "\n"
                                           "  int2 pos_in_filter_block = (int2)(out_c * filter_width, batch_index * filter_height);\n"
                                           "\n"
                                           "  int filter_x = pos_in_filter_block.x ;\n"
                                           "  int filter_y = pos_in_filter_block.y ;\n"
                                           "\n"
                                           "  half4 inputs[9];\n"
                                           "\n"
                                           "  inputs[0] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x - 1, pos_in_input_block.y + in_pos_in_one_block.y - 1)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x - 1 < 0 || in_pos_in_one_block.y - 1 < 0 || in_pos_in_one_block.x - 1 >= input_width || in_pos_in_one_block.y - 1 >= input_height) << 15));\n"
                                           "\n"
                                           "  inputs[1] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x, pos_in_input_block.y + in_pos_in_one_block.y - 1)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y - 1 < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y - 1 >= input_height) << 15));\n"
                                           "\n"
                                           "  inputs[2] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x + 1, pos_in_input_block.y + in_pos_in_one_block.y - 1)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x + 1 < 0 || in_pos_in_one_block.y - 1 < 0 || in_pos_in_one_block.x + 1 >= input_width || in_pos_in_one_block.y - 1 >= input_height) << 15));\n"
                                           "\n"
                                           "  inputs[3] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x - 1, pos_in_input_block.y + in_pos_in_one_block.y)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x - 1 < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x - 1 >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "  /*\n"
                                           "  if (output_pos.x == 112 && output_pos.y == 0) {\n"
                                           "        half4 input1 = inputs[3];\n"
                                           "        float4 in = (float4)(input1.x, input1.y, input1.z, input1.w);\n"
                                           "        printf(\" input4 3 - %v4hlf \\n\", in);\n"
                                           "        printf(\" --- %d ---\\n\", in_pos_in_one_block.x - 1);\n"
                                           "  }\n"
                                           "  */\n"
                                           "\n"
                                           "\n"
                                           "  inputs[4] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x, pos_in_input_block.y + in_pos_in_one_block.y)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "\n"
                                           "  inputs[5] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x + 1, pos_in_input_block.y + in_pos_in_one_block.y)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x + 1 < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x + 1 >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "\n"
                                           "  inputs[6] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x - 1, pos_in_input_block.y + in_pos_in_one_block.y + 1)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x - 1 < 0 || in_pos_in_one_block.y + 1 < 0 || in_pos_in_one_block.x - 1 >= input_width || in_pos_in_one_block.y + 1 >= input_height) << 15));\n"
                                           "\n"
                                           "  inputs[7] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x, pos_in_input_block.y + in_pos_in_one_block.y + 1)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y + 1 < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y + 1 >= input_height) << 15));\n"
                                           "\n"
                                           "  inputs[8] = select(read_imageh(input, sampler, (int2)(pos_in_input_block.x + in_pos_in_one_block.x + 1, pos_in_input_block.y + in_pos_in_one_block.y + 1)),\n"
                                           "                     (half4)(0.0f),\n"
                                           "                     (ushort4)((in_pos_in_one_block.x + 1 < 0 || in_pos_in_one_block.y + 1 < 0 || in_pos_in_one_block.x + 1 >= input_width || in_pos_in_one_block.y + 1 >= input_height) << 15));\n"
                                           "\n"
                                           "  half4 filters[9];\n"
                                           "  filters[0] =  read_imageh(filter, sampler,(int2)(filter_x,filter_y));\n"
                                           "  filters[1] =  read_imageh(filter, sampler,(int2)(filter_x + 1,filter_y));\n"
                                           "  filters[2] =  read_imageh(filter, sampler,(int2)(filter_x + 2,filter_y));\n"
                                           "  filters[3] =  read_imageh(filter, sampler,(int2)(filter_x,filter_y + 1));\n"
                                           "  filters[4] =  read_imageh(filter, sampler,(int2)(filter_x + 1,filter_y + 1));\n"
                                           "  filters[5] =  read_imageh(filter, sampler,(int2)(filter_x + 2,filter_y + 1));\n"
                                           "  filters[6] =  read_imageh(filter, sampler,(int2)(filter_x,filter_y + 2));\n"
                                           "  filters[7] =  read_imageh(filter, sampler,(int2)(filter_x + 1,filter_y + 2));\n"
                                           "  filters[8] =  read_imageh(filter, sampler,(int2)(filter_x + 2,filter_y + 2));\n"
                                           "\n"
                                           "  for(int i = 0 ;i < 9 ; i++){\n"
                                           "    output += inputs[i] * filters[i];\n"
                                           "  }\n"
                                           "#ifdef BATCH_NORM\n"
                                           "  output = output * read_imageh(new_scale, sampler, (int2)(out_c, 0)) + read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "#endif\n"
                                           "\n"
                                           "  /*\n"
                                           "\n"
                                           "  if (output_pos.x == 112 && output_pos.y == 0) {\n"
                                           "\n"
                                           "      for (int i = 0; i < 9; ++i) {\n"
                                           "          half4 input1 = inputs[i];\n"
                                           "          float4 in = (float4)(input1.x, input1.y, input1.z, input1.w);\n"
                                           "          printf(\" input4 %d - %v4hlf \\n\", i, in);\n"
                                           "      }\n"
                                           "\n"
                                           "      float4 out = (float4)(output.x, output.y, output.z, output.w);\n"
                                           "      printf(\" depth wise output output4 = %v4hlf \\n\", out);\n"
                                           "      printf(\" pos_in_input_block -x %d \\n \", pos_in_input_block.x);\n"
                                           "      printf(\" pos_in_input_block -y %d \\n \", pos_in_input_block.y);\n"
                                           "      printf(\" in_pos_in_one_block - x %d \\n\", in_pos_in_one_block.x);\n"
                                           "      printf(\" in_pos_in_one_block - y %d \\n\", in_pos_in_one_block.y);\n"
                                           "  }\n"
                                           "\n"
                                           "  */\n"
                                           "\n"
                                           "  write_imageh(output_image, output_pos, output);\n"
                                           "\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void conv_1x1_spl_DRELU_DBIASE_CH(\n"
                                           "        __private const int global_size_dim0, __private const int global_size_dim1,\n"
                                           "        __private const int global_size_dim2, __read_only image2d_t input_image,\n"
                                           "        __read_only image2d_t filter,\n"
                                           "#if defined(BIASE_CH) || defined(BIASE_ELE)\n"
                                           "        __read_only image2d_t bias,\n"
                                           "#endif\n"
                                           "#ifdef BATCH_NORM\n"
                                           "        __read_only image2d_t new_scale, __read_only image2d_t new_biase,\n"
                                           "#endif\n"
                                           "        __write_only image2d_t output_image, __private const int stride,\n"
                                           "        __private const int offset, __private const int input_c,__private const int input_c_origin,\n"
                                           "        __private const int dilation,\n"
                                           "        __private const int input_width,  /* of one block */\n"
                                           "        __private const int input_height, /* of one block */\n"
                                           "        __private const int output_width,\n"
                                           "        __private const int output_height,\n"
                                           "        __private const int old_w\n"
                                           ") {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int out_w0 = out_w;\n"
                                           "  int out_w1 = out_w + global_size_dim1;\n"
                                           "  int out_w2 = out_w + global_size_dim1 * 2;\n"
                                           "  int out_w3 = out_w + global_size_dim1 * 3;\n"
                                           "\n"
                                           "  int outpos_main = mul24(out_c , old_w);\n"
                                           "  int2 output_pos0 = (int2)(outpos_main + out_w0, out_nh);\n"
                                           "  int2 output_pos1 = (int2)(outpos_main + out_w1, out_nh);\n"
                                           "  int2 output_pos2 = (int2)(outpos_main + out_w2, out_nh);\n"
                                           "  int2 output_pos3 = (int2)(outpos_main + out_w3, out_nh);\n"
                                           "\n"
                                           "  const sampler_t sampler =\n"
                                           "          CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int2 stride_xy = (int2)(stride, stride);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block0 = (int2)(out_w0, out_nh);\n"
                                           "  int2 in_pos_in_one_block0 =\n"
                                           "          ouput_pos_in_one_block0 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block1 = (int2)(out_w1, out_nh);\n"
                                           "  int2 in_pos_in_one_block1 =\n"
                                           "          ouput_pos_in_one_block1 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block2 = (int2)(out_w2, out_nh);\n"
                                           "  int2 in_pos_in_one_block2 =\n"
                                           "          ouput_pos_in_one_block2 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block3 = (int2)(out_w3, out_nh);\n"
                                           "  int2 in_pos_in_one_block3 =\n"
                                           "          ouput_pos_in_one_block3 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "#ifdef BIASE_CH\n"
                                           "  half4 output0 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "    half4 output1 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "    half4 output2 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "    half4 output3 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "#elif defined(BIASE_ELE)\n"
                                           "  half4 output0 = read_imageh(bias, sampler, output_pos0);\n"
                                           "    half4 output1 = read_imageh(bias, sampler, output_pos1);\n"
                                           "    half4 output2 = read_imageh(bias, sampler, output_pos2);\n"
                                           "    half4 output3 = read_imageh(bias, sampler, output_pos3);\n"
                                           "\n"
                                           "#else\n"
                                           "  half4 output0 = 0.0f;\n"
                                           "  half4 output1 = 0.0f;\n"
                                           "  half4 output2 = 0.0f;\n"
                                           "  half4 output3 = 0.0f;\n"
                                           "#endif\n"
                                           "\n"
                                           "  int max_w_bound = input_c * input_width;\n"
                                           "  int burndary_index = input_c * 4 - input_c_origin;\n"
                                           "  for (int i = 0; i < input_c; ++i) {\n"
                                           "    // ------------0---------------\n"
                                           "    int2 pos_in = (int2)(i * input_width + in_pos_in_one_block0.x, in_pos_in_one_block0.y);\n"
                                           "    half4 input0 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    half4 weight0 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 0));\n"
                                           "    half4 weight1 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 1));\n"
                                           "    half4 weight2 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 2));\n"
                                           "    half4 weight3 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 3));\n"
                                           "\n"
                                           "    int bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input0.y = 0.0f;\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output0 = mad(input0.x, weight0, output0);\n"
                                           "    output0 = mad(input0.y, weight1, output0);\n"
                                           "    output0 = mad(input0.z, weight2, output0);\n"
                                           "    output0 = mad(input0.w, weight3, output0);\n"
                                           "    // -------------1--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block1.x, in_pos_in_one_block1.y);\n"
                                           "    half4 input1 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input1.y = 0.0f;\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output1 = mad(input1.x, weight0, output1);\n"
                                           "    output1 = mad(input1.y, weight1, output1);\n"
                                           "    output1 = mad(input1.z, weight2, output1);\n"
                                           "    output1 = mad(input1.w, weight3, output1);\n"
                                           "\n"
                                           "    // -------------2--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block2.x, in_pos_in_one_block2.y);\n"
                                           "    half4 input2 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input2.y = 0.0f;\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output2 = mad(input2.x, weight0, output2);\n"
                                           "    output2 = mad(input2.y, weight1, output2);\n"
                                           "    output2 = mad(input2.z, weight2, output2);\n"
                                           "    output2 = mad(input2.w, weight3, output2);\n"
                                           "\n"
                                           "    // -------------3--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block3.x, in_pos_in_one_block3.y);\n"
                                           "    half4 input3 = read_imageh(input_image, sampler, pos_in);\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input3.y = 0.0f;\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "\n"
                                           "    output3 = mad(input3.x, weight0, output3);\n"
                                           "    output3 = mad(input3.y, weight1, output3);\n"
                                           "    output3 = mad(input3.z, weight2, output3);\n"
                                           "    output3 = mad(input3.w, weight3, output3);\n"
                                           "  }\n"
                                           "\n"
                                           "#ifdef BATCH_NORM\n"
                                           "  output0 = output0 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "\n"
                                           "    output1 = output1 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "\n"
                                           "    output2 = output2 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "\n"
                                           "    output3 = output3 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "#endif\n"
                                           "\n"
                                           "#ifdef RELU\n"
                                           "  output0 = activation(output0);\n"
                                           "     output1 = activation(output1);\n"
                                           "     output2 = activation(output2);\n"
                                           "     output3 = activation(output3);\n"
                                           "#endif\n"
                                           "\n"
                                           "  if (out_w0 < old_w) {\n"
                                           "    write_imageh(output_image, output_pos0, output0);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w1 < old_w){\n"
                                           "    write_imageh(output_image, output_pos1, output1);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w2 < old_w){\n"
                                           "    write_imageh(output_image, output_pos2, output2);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w3 < old_w){\n"
                                           "    write_imageh(output_image, output_pos3, output3);\n"
                                           "  }\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void conv_3x3_DRELU_DBIASE_CH(__private const int global_size_dim0,\n"
                                           "                       __private const int global_size_dim1,\n"
                                           "                       __private const int global_size_dim2,\n"
                                           "                       __read_only image2d_t input_image,\n"
                                           "                       __read_only image2d_t filter,\n"
                                           "\n"
                                           "#if defined(BIASE_CH) || defined(BIASE_ELE)\n"
                                           "        __read_only image2d_t bias,\n"
                                           "#endif\n"
                                           "\n"
                                           "#ifdef BATCH_NORM\n"
                                           "__read_only image2d_t new_scale,\n"
                                           "                                              __read_only image2d_t new_biase,\n"
                                           "#endif\n"
                                           "\n"
                                           "                       __write_only image2d_t output_image,\n"
                                           "                       __private const int stride,\n"
                                           "                       __private const int offset,\n"
                                           "                       __private const int input_c,\n"
                                           "                       __private const int dilation,\n"
                                           "                       __private const int input_width,/* of one block */\n"
                                           "                       __private const int input_height,/* of one block */\n"
                                           "                       __private const int output_width,\n"
                                           "                       __private const int output_height,\n"
                                           "                       __private const int output_c,\n"
                                           "                       __private const int filter_channel,\n"
                                           "                       __private const int group) {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int2 output_pos = (int2)(out_c * global_size_dim1 + out_w, out_nh);\n"
                                           "\n"
                                           "  if (out_c >= global_size_dim0 ||\n"
                                           "      out_w >= global_size_dim1 ||\n"
                                           "      out_nh >= global_size_dim2) {\n"
                                           "    return;\n"
                                           "  }\n"
                                           "\n"
                                           "\n"
                                           "  int2 stride_xy;\n"
                                           "  stride_xy.x = stride;\n"
                                           "  stride_xy.y = stride;\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block;\n"
                                           "  ouput_pos_in_one_block.x = out_w;\n"
                                           "  ouput_pos_in_one_block.y = out_nh;\n"
                                           "\n"
                                           "\n"
                                           "  const sampler_t sampler = CLK_NORMALIZED_COORDS_TRUE |\n"
                                           "                            CLK_ADDRESS_CLAMP          |\n"
                                           "                            CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int2 in_pos_in_one_block;\n"
                                           "  in_pos_in_one_block.x = ouput_pos_in_one_block.x * stride + offset;\n"
                                           "  in_pos_in_one_block.y = ouput_pos_in_one_block.y * stride + offset;\n"
                                           "\n"
                                           "#ifdef BIASE_CH\n"
                                           "  half4 output = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "#elif defined(BIASE_ELE)\n"
                                           "  half4 output = read_imageh(bias, sampler, output_pos);\n"
                                           "#else\n"
                                           "  half4 output = 0.0f;\n"
                                           "#endif\n"
                                           "\n"
                                           "  half4 input[9];\n"
                                           "  if (group == 1) {\n"
                                           "    for (int i = 0; i < input_c; ++i) {\n"
                                           "      int2 pos_in = (int2)(i * input_width + in_pos_in_one_block.x, in_pos_in_one_block.y);\n"
                                           "      input[0] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x - dilation, pos_in.y - dilation)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x - dilation < 0 || in_pos_in_one_block.y - dilation < 0 || in_pos_in_one_block.x - dilation >= input_width || in_pos_in_one_block.y - dilation >= input_height) << 15));\n"
                                           "\n"
                                           "      input[1] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x, pos_in.y - dilation)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y - dilation < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y - dilation >= input_height) << 15));\n"
                                           "\n"
                                           "      input[2] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x + dilation, pos_in.y - dilation)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x + dilation < 0 || in_pos_in_one_block.y - dilation < 0 || in_pos_in_one_block.x + dilation >= input_width || in_pos_in_one_block.y - dilation >= input_height) << 15));\n"
                                           "\n"
                                           "      input[3] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x - dilation, pos_in.y)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x - dilation < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x - dilation >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "\n"
                                           "      input[4] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x, pos_in.y)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "\n"
                                           "      input[5] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x + dilation, pos_in.y)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x + dilation < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x + dilation >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "\n"
                                           "      input[6] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x - dilation, pos_in.y + dilation)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x - dilation < 0 || in_pos_in_one_block.y + dilation < 0 || in_pos_in_one_block.x - dilation >= input_width || in_pos_in_one_block.y + dilation >= input_height) << 15));\n"
                                           "\n"
                                           "      input[7] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x, pos_in.y + dilation)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y + dilation < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y + dilation >= input_height) << 15));\n"
                                           "\n"
                                           "      input[8] = select(read_imageh(input_image, sampler,\n"
                                           "                                    (int2)(pos_in.x + dilation, pos_in.y + dilation)),\n"
                                           "                        (half4)(0.0f),\n"
                                           "                        (ushort4)((in_pos_in_one_block.x + dilation < 0 || in_pos_in_one_block.y + dilation < 0 || in_pos_in_one_block.x + dilation >= input_width || in_pos_in_one_block.y + dilation >= input_height) << 15));\n"
                                           "\n"
                                           "\n"
                                           "/*\n"
                                           "            for (int j = 0; j < 9; ++j) {\n"
                                           "                int2 pos_of_weight;\n"
                                           "                pos_of_weight.x = i * 3 + j % 3;\n"
                                           "                pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "                half4 weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "                output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "                pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "                half4 weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "                output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "                pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "                half4 weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "                output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "                pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "                half4 weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "                output.w += dot(input[j], weight_w);\n"
                                           "            }\n"
                                           "*/\n"
                                           "      int j = 0;\n"
                                           "      int2 pos_of_weight;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      half4 weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      half4 weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      half4 weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      half4 weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 1;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 2;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 3;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 4;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 5;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 6;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 7;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "      j = 8;\n"
                                           "      pos_of_weight.x = i * 3 + j % 3;\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 0 * 3 + j / 3;\n"
                                           "      weight_x = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.x += dot(input[j], weight_x);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 1 * 3 + j / 3;\n"
                                           "      weight_y = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.y += dot(input[j], weight_y);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 2 * 3 + j / 3;\n"
                                           "      weight_z = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.z += dot(input[j], weight_z);\n"
                                           "\n"
                                           "      pos_of_weight.y = out_c * 4 * 3 + 3 * 3 + j / 3;\n"
                                           "      weight_w = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "      output.w += dot(input[j], weight_w);\n"
                                           "\n"
                                           "    }\n"
                                           "  } else {\n"
                                           "    for (int i = 0; i < 4; i++) {\n"
                                           "      int used_input_channel_num = (out_c * 4 + i) / (output_c / group) * filter_channel;\n"
                                           "      for (int f_c = 0; f_c < filter_channel; ++f_c) {\n"
                                           "        int input_c = used_input_channel_num + f_c;\n"
                                           "        int input_block = input_c / 4;\n"
                                           "        int2 pos_in = (int2)(input_block * input_width + in_pos_in_one_block.x, in_pos_in_one_block.y);\n"
                                           "        input[0] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x - dilation, pos_in.y - dilation)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x - dilation < 0 || in_pos_in_one_block.y - dilation < 0 || in_pos_in_one_block.x - dilation >= input_width || in_pos_in_one_block.y - dilation >= input_height) << 15));\n"
                                           "        input[1] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x, pos_in.y - dilation)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y - dilation < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y - dilation >= input_height) << 15));\n"
                                           "        input[2] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x + dilation, pos_in.y - dilation)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x + dilation < 0 || in_pos_in_one_block.y - dilation < 0 || in_pos_in_one_block.x + dilation >= input_width || in_pos_in_one_block.y - dilation >= input_height) << 15));\n"
                                           "        input[3] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x - dilation, pos_in.y)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x - dilation < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x - dilation >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "        input[4] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x, pos_in.y)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "        input[5] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x + dilation, pos_in.y)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x + dilation < 0 || in_pos_in_one_block.y < 0 || in_pos_in_one_block.x + dilation >= input_width || in_pos_in_one_block.y >= input_height) << 15));\n"
                                           "        input[6] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x - dilation, pos_in.y + dilation)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x - dilation < 0 || in_pos_in_one_block.y + dilation < 0 || in_pos_in_one_block.x - dilation >= input_width || in_pos_in_one_block.y + dilation >= input_height) << 15));\n"
                                           "        input[7] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x, pos_in.y + dilation)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x < 0 || in_pos_in_one_block.y + dilation < 0 || in_pos_in_one_block.x >= input_width || in_pos_in_one_block.y + dilation >= input_height) << 15));\n"
                                           "        input[8] = select(read_imageh(input_image, sampler,\n"
                                           "                                      (int2)(pos_in.x + dilation, pos_in.y + dilation)),\n"
                                           "                          (half4)(0.0f),\n"
                                           "                          (ushort4)((in_pos_in_one_block.x + dilation < 0 || in_pos_in_one_block.y + dilation < 0 || in_pos_in_one_block.x + dilation >= input_width || in_pos_in_one_block.y + dilation >= input_height) << 15));\n"
                                           "\n"
                                           "        half tmp_out = 0;\n"
                                           "        for (int j = 0; j < 9; j++) {\n"
                                           "          int2 pos_of_weight;\n"
                                           "          pos_of_weight.x = (f_c / 4) * 3 + j % 3;\n"
                                           "          pos_of_weight.y = out_c * 4 * 3 + i * 3 + j / 3;\n"
                                           "          half4 weight = read_imageh(filter, sampler, pos_of_weight);\n"
                                           "          int f_c_offset = f_c % 4;\n"
                                           "          half f_value;\n"
                                           "          if (f_c_offset == 0) {\n"
                                           "            f_value = weight.x;\n"
                                           "          } else if (f_c_offset == 1) {\n"
                                           "            f_value = weight.y;\n"
                                           "          } else if (f_c_offset == 2) {\n"
                                           "            f_value = weight.z;\n"
                                           "          } else if (f_c_offset == 3) {\n"
                                           "            f_value = weight.w;\n"
                                           "          }\n"
                                           "          int input_c_offset = input_c % 4;\n"
                                           "          half input_value;\n"
                                           "          if (input_c_offset == 0) {\n"
                                           "            input_value = input[j].x;\n"
                                           "          } else if (input_c_offset == 1) {\n"
                                           "            input_value = input[j].y;\n"
                                           "          } else if (input_c_offset == 2) {\n"
                                           "            input_value = input[j].z;\n"
                                           "          } else if (input_c_offset == 3) {\n"
                                           "            input_value = input[j].w;\n"
                                           "          }\n"
                                           "          tmp_out += f_value * input_value;\n"
                                           "        }\n"
                                           "\n"
                                           "        if (i == 0) {\n"
                                           "          output.x += tmp_out;\n"
                                           "        } else if (i == 1) {\n"
                                           "          output.y += tmp_out;\n"
                                           "        } else if (i == 2) {\n"
                                           "          output.z += tmp_out;\n"
                                           "        } else if (i == 3) {\n"
                                           "          output.w += tmp_out;\n"
                                           "        }\n"
                                           "      }\n"
                                           "    }\n"
                                           "  }\n"
                                           "\n"
                                           "\n"
                                           "#ifdef BATCH_NORM\n"
                                           "  output = output * read_imageh(new_scale, sampler, (int2)(out_c, 0)) + read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "#endif\n"
                                           "\n"
                                           "#ifdef RELU\n"
                                           "  output = activation(output);\n"
                                           "#endif\n"
                                           "\n"
                                           "  write_imageh(output_image, output_pos, output);\n"
                                           "}\n"
                                           "\n"
                                           "\n"
                                           "__kernel void conv_1x1_spl(\n"
                                           "        __private const int global_size_dim0, __private const int global_size_dim1,\n"
                                           "        __private const int global_size_dim2, __read_only image2d_t input_image,\n"
                                           "        __read_only image2d_t filter,\n"
                                           "        __write_only image2d_t output_image, __private const int stride,\n"
                                           "        __private const int offset, __private const int input_c,__private const int input_c_origin,\n"
                                           "        __private const int dilation,\n"
                                           "        __private const int input_width,  /* of one block */\n"
                                           "        __private const int input_height, /* of one block */\n"
                                           "        __private const int output_width,\n"
                                           "        __private const int output_height,\n"
                                           "        __private const int old_w\n"
                                           ") {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int out_w0 = out_w;\n"
                                           "  int out_w1 = out_w + global_size_dim1;\n"
                                           "  int out_w2 = out_w + global_size_dim1 * 2;\n"
                                           "  int out_w3 = out_w + global_size_dim1 * 3;\n"
                                           "\n"
                                           "  int outpos_main = mul24(out_c , old_w);\n"
                                           "  int2 output_pos0 = (int2)(outpos_main + out_w0, out_nh);\n"
                                           "  int2 output_pos1 = (int2)(outpos_main + out_w1, out_nh);\n"
                                           "  int2 output_pos2 = (int2)(outpos_main + out_w2, out_nh);\n"
                                           "  int2 output_pos3 = (int2)(outpos_main + out_w3, out_nh);\n"
                                           "\n"
                                           "  const sampler_t sampler =\n"
                                           "          CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int2 stride_xy = (int2)(stride, stride);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block0 = (int2)(out_w0, out_nh);\n"
                                           "  int2 in_pos_in_one_block0 =\n"
                                           "          ouput_pos_in_one_block0 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block1 = (int2)(out_w1, out_nh);\n"
                                           "  int2 in_pos_in_one_block1 =\n"
                                           "          ouput_pos_in_one_block1 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block2 = (int2)(out_w2, out_nh);\n"
                                           "  int2 in_pos_in_one_block2 =\n"
                                           "          ouput_pos_in_one_block2 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block3 = (int2)(out_w3, out_nh);\n"
                                           "  int2 in_pos_in_one_block3 =\n"
                                           "          ouput_pos_in_one_block3 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  half4 output0 = 0.0f;\n"
                                           "  half4 output1 = 0.0f;\n"
                                           "  half4 output2 = 0.0f;\n"
                                           "  half4 output3 = 0.0f;\n"
                                           "\n"
                                           "  int max_w_bound = input_c * input_width;\n"
                                           "  int burndary_index = input_c * 4 - input_c_origin;\n"
                                           "  for (int i = 0; i < input_c; ++i) {\n"
                                           "    // ------------0---------------\n"
                                           "    int2 pos_in = (int2)(i * input_width + in_pos_in_one_block0.x, in_pos_in_one_block0.y);\n"
                                           "    half4 input0 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    half4 weight0 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 0));\n"
                                           "    half4 weight1 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 1));\n"
                                           "    half4 weight2 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 2));\n"
                                           "    half4 weight3 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 3));\n"
                                           "\n"
                                           "    int bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input0.y = 0.0f;\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output0 = mad(input0.x, weight0, output0);\n"
                                           "    output0 = mad(input0.y, weight1, output0);\n"
                                           "    output0 = mad(input0.z, weight2, output0);\n"
                                           "    output0 = mad(input0.w, weight3, output0);\n"
                                           "    // -------------1--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block1.x, in_pos_in_one_block1.y);\n"
                                           "    half4 input1 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input1.y = 0.0f;\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output1 = mad(input1.x, weight0, output1);\n"
                                           "    output1 = mad(input1.y, weight1, output1);\n"
                                           "    output1 = mad(input1.z, weight2, output1);\n"
                                           "    output1 = mad(input1.w, weight3, output1);\n"
                                           "\n"
                                           "    // -------------2--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block2.x, in_pos_in_one_block2.y);\n"
                                           "    half4 input2 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input2.y = 0.0f;\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output2 = mad(input2.x, weight0, output2);\n"
                                           "    output2 = mad(input2.y, weight1, output2);\n"
                                           "    output2 = mad(input2.z, weight2, output2);\n"
                                           "    output2 = mad(input2.w, weight3, output2);\n"
                                           "\n"
                                           "    // -------------3--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block3.x, in_pos_in_one_block3.y);\n"
                                           "    half4 input3 = read_imageh(input_image, sampler, pos_in);\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input3.y = 0.0f;\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "\n"
                                           "    output3 = mad(input3.x, weight0, output3);\n"
                                           "    output3 = mad(input3.y, weight1, output3);\n"
                                           "    output3 = mad(input3.z, weight2, output3);\n"
                                           "    output3 = mad(input3.w, weight3, output3);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w0 < old_w) {\n"
                                           "    write_imageh(output_image, output_pos0, output0);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w1 < old_w){\n"
                                           "    write_imageh(output_image, output_pos1, output1);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w2 < old_w){\n"
                                           "    write_imageh(output_image, output_pos2, output2);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w3 < old_w){\n"
                                           "    write_imageh(output_image, output_pos3, output3);\n"
                                           "  }\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void conv_1x1_spl_DBIASE_CH(\n"
                                           "        __private const int global_size_dim0, __private const int global_size_dim1,\n"
                                           "        __private const int global_size_dim2, __read_only image2d_t input_image,\n"
                                           "        __read_only image2d_t filter,\n"
                                           "#if defined(BIASE_CH) || defined(BIASE_ELE)\n"
                                           "        __read_only image2d_t bias,\n"
                                           "#endif\n"
                                           "#ifdef BATCH_NORM\n"
                                           "        __read_only image2d_t new_scale, __read_only image2d_t new_biase,\n"
                                           "#endif\n"
                                           "        __write_only image2d_t output_image, __private const int stride,\n"
                                           "        __private const int offset, __private const int input_c,__private const int input_c_origin,\n"
                                           "        __private const int dilation,\n"
                                           "        __private const int input_width,  /* of one block */\n"
                                           "        __private const int input_height, /* of one block */\n"
                                           "        __private const int output_width,\n"
                                           "        __private const int output_height,\n"
                                           "        __private const int old_w\n"
                                           ") {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int out_w0 = out_w;\n"
                                           "  int out_w1 = out_w + global_size_dim1;\n"
                                           "  int out_w2 = out_w + global_size_dim1 * 2;\n"
                                           "  int out_w3 = out_w + global_size_dim1 * 3;\n"
                                           "\n"
                                           "  int outpos_main = mul24(out_c , old_w);\n"
                                           "  int2 output_pos0 = (int2)(outpos_main + out_w0, out_nh);\n"
                                           "  int2 output_pos1 = (int2)(outpos_main + out_w1, out_nh);\n"
                                           "  int2 output_pos2 = (int2)(outpos_main + out_w2, out_nh);\n"
                                           "  int2 output_pos3 = (int2)(outpos_main + out_w3, out_nh);\n"
                                           "\n"
                                           "  const sampler_t sampler =\n"
                                           "          CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int2 stride_xy = (int2)(stride, stride);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block0 = (int2)(out_w0, out_nh);\n"
                                           "  int2 in_pos_in_one_block0 =\n"
                                           "          ouput_pos_in_one_block0 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block1 = (int2)(out_w1, out_nh);\n"
                                           "  int2 in_pos_in_one_block1 =\n"
                                           "          ouput_pos_in_one_block1 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block2 = (int2)(out_w2, out_nh);\n"
                                           "  int2 in_pos_in_one_block2 =\n"
                                           "          ouput_pos_in_one_block2 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block3 = (int2)(out_w3, out_nh);\n"
                                           "  int2 in_pos_in_one_block3 =\n"
                                           "          ouput_pos_in_one_block3 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "#ifdef BIASE_CH\n"
                                           "  half4 output0 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "    half4 output1 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "    half4 output2 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "    half4 output3 = read_imageh(bias, sampler, (int2)(out_c, 0));\n"
                                           "#elif defined(BIASE_ELE)\n"
                                           "  half4 output0 = read_imageh(bias, sampler, output_pos0);\n"
                                           "    half4 output1 = read_imageh(bias, sampler, output_pos1);\n"
                                           "    half4 output2 = read_imageh(bias, sampler, output_pos2);\n"
                                           "    half4 output3 = read_imageh(bias, sampler, output_pos3);\n"
                                           "\n"
                                           "#else\n"
                                           "  half4 output0 = 0.0f;\n"
                                           "  half4 output1 = 0.0f;\n"
                                           "  half4 output2 = 0.0f;\n"
                                           "  half4 output3 = 0.0f;\n"
                                           "#endif\n"
                                           "\n"
                                           "  int max_w_bound = input_c * input_width;\n"
                                           "  int burndary_index = input_c * 4 - input_c_origin;\n"
                                           "  for (int i = 0; i < input_c; ++i) {\n"
                                           "    // ------------0---------------\n"
                                           "    int2 pos_in = (int2)(i * input_width + in_pos_in_one_block0.x, in_pos_in_one_block0.y);\n"
                                           "    half4 input0 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    half4 weight0 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 0));\n"
                                           "    half4 weight1 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 1));\n"
                                           "    half4 weight2 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 2));\n"
                                           "    half4 weight3 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 3));\n"
                                           "\n"
                                           "    int bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input0.y = 0.0f;\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output0 = mad(input0.x, weight0, output0);\n"
                                           "    output0 = mad(input0.y, weight1, output0);\n"
                                           "    output0 = mad(input0.z, weight2, output0);\n"
                                           "    output0 = mad(input0.w, weight3, output0);\n"
                                           "    // -------------1--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block1.x, in_pos_in_one_block1.y);\n"
                                           "    half4 input1 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input1.y = 0.0f;\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output1 = mad(input1.x, weight0, output1);\n"
                                           "    output1 = mad(input1.y, weight1, output1);\n"
                                           "    output1 = mad(input1.z, weight2, output1);\n"
                                           "    output1 = mad(input1.w, weight3, output1);\n"
                                           "\n"
                                           "    // -------------2--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block2.x, in_pos_in_one_block2.y);\n"
                                           "    half4 input2 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input2.y = 0.0f;\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output2 = mad(input2.x, weight0, output2);\n"
                                           "    output2 = mad(input2.y, weight1, output2);\n"
                                           "    output2 = mad(input2.z, weight2, output2);\n"
                                           "    output2 = mad(input2.w, weight3, output2);\n"
                                           "\n"
                                           "    // -------------3--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block3.x, in_pos_in_one_block3.y);\n"
                                           "    half4 input3 = read_imageh(input_image, sampler, pos_in);\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input3.y = 0.0f;\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "\n"
                                           "    output3 = mad(input3.x, weight0, output3);\n"
                                           "    output3 = mad(input3.y, weight1, output3);\n"
                                           "    output3 = mad(input3.z, weight2, output3);\n"
                                           "    output3 = mad(input3.w, weight3, output3);\n"
                                           "  }\n"
                                           "\n"
                                           "#ifdef BATCH_NORM\n"
                                           "  output0 = output0 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "\n"
                                           "    output1 = output1 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "\n"
                                           "    output2 = output2 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "\n"
                                           "    output3 = output3 * read_imageh(new_scale, sampler, (int2)(out_c, 0)) +\n"
                                           "          read_imageh(new_biase, sampler, (int2)(out_c, 0));\n"
                                           "#endif\n"
                                           "\n"
                                           "  if (out_w0 < old_w) {\n"
                                           "    write_imageh(output_image, output_pos0, output0);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w1 < old_w){\n"
                                           "    write_imageh(output_image, output_pos1, output1);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w2 < old_w){\n"
                                           "    write_imageh(output_image, output_pos2, output2);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w3 < old_w){\n"
                                           "    write_imageh(output_image, output_pos3, output3);\n"
                                           "  }\n"
                                           "}\n"
                                           "\n"
                                           "__kernel void conv_1x1_spl_DRELU(\n"
                                           "        __private const int global_size_dim0, __private const int global_size_dim1,\n"
                                           "        __private const int global_size_dim2, __read_only image2d_t input_image,\n"
                                           "        __read_only image2d_t filter,\n"
                                           "        __write_only image2d_t output_image, __private const int stride,\n"
                                           "        __private const int offset, __private const int input_c,__private const int input_c_origin,\n"
                                           "        __private const int dilation,\n"
                                           "        __private const int input_width,  /* of one block */\n"
                                           "        __private const int input_height, /* of one block */\n"
                                           "        __private const int output_width,\n"
                                           "        __private const int output_height,\n"
                                           "        __private const int old_w\n"
                                           ") {\n"
                                           "\n"
                                           "  const int out_c = get_global_id(0);\n"
                                           "  const int out_w = get_global_id(1);\n"
                                           "  const int out_nh = get_global_id(2);\n"
                                           "\n"
                                           "  int out_w0 = out_w;\n"
                                           "  int out_w1 = out_w + global_size_dim1;\n"
                                           "  int out_w2 = out_w + global_size_dim1 * 2;\n"
                                           "  int out_w3 = out_w + global_size_dim1 * 3;\n"
                                           "\n"
                                           "  int outpos_main = mul24(out_c , old_w);\n"
                                           "  int2 output_pos0 = (int2)(outpos_main + out_w0, out_nh);\n"
                                           "  int2 output_pos1 = (int2)(outpos_main + out_w1, out_nh);\n"
                                           "  int2 output_pos2 = (int2)(outpos_main + out_w2, out_nh);\n"
                                           "  int2 output_pos3 = (int2)(outpos_main + out_w3, out_nh);\n"
                                           "\n"
                                           "  const sampler_t sampler =\n"
                                           "          CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n"
                                           "\n"
                                           "  int2 stride_xy = (int2)(stride, stride);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block0 = (int2)(out_w0, out_nh);\n"
                                           "  int2 in_pos_in_one_block0 =\n"
                                           "          ouput_pos_in_one_block0 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block1 = (int2)(out_w1, out_nh);\n"
                                           "  int2 in_pos_in_one_block1 =\n"
                                           "          ouput_pos_in_one_block1 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block2 = (int2)(out_w2, out_nh);\n"
                                           "  int2 in_pos_in_one_block2 =\n"
                                           "          ouput_pos_in_one_block2 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  int2 ouput_pos_in_one_block3 = (int2)(out_w3, out_nh);\n"
                                           "  int2 in_pos_in_one_block3 =\n"
                                           "          ouput_pos_in_one_block3 * stride_xy + (int2)(offset, offset);\n"
                                           "\n"
                                           "  half4 output0 = 0.0f;\n"
                                           "  half4 output1 = 0.0f;\n"
                                           "  half4 output2 = 0.0f;\n"
                                           "  half4 output3 = 0.0f;\n"
                                           "\n"
                                           "  int max_w_bound = input_c * input_width;\n"
                                           "  int burndary_index = input_c * 4 - input_c_origin;\n"
                                           "  for (int i = 0; i < input_c; ++i) {\n"
                                           "    // ------------0---------------\n"
                                           "    int2 pos_in = (int2)(i * input_width + in_pos_in_one_block0.x, in_pos_in_one_block0.y);\n"
                                           "    half4 input0 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    half4 weight0 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 0));\n"
                                           "    half4 weight1 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 1));\n"
                                           "    half4 weight2 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 2));\n"
                                           "    half4 weight3 = read_imageh(filter, sampler, (int2)(out_c, i * 4 + 3));\n"
                                           "\n"
                                           "    int bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input0.y = 0.0f;\n"
                                           "        input0.z = 0.0f;\n"
                                           "        input0.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output0 = mad(input0.x, weight0, output0);\n"
                                           "    output0 = mad(input0.y, weight1, output0);\n"
                                           "    output0 = mad(input0.z, weight2, output0);\n"
                                           "    output0 = mad(input0.w, weight3, output0);\n"
                                           "    // -------------1--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block1.x, in_pos_in_one_block1.y);\n"
                                           "    half4 input1 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input1.y = 0.0f;\n"
                                           "        input1.z = 0.0f;\n"
                                           "        input1.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output1 = mad(input1.x, weight0, output1);\n"
                                           "    output1 = mad(input1.y, weight1, output1);\n"
                                           "    output1 = mad(input1.z, weight2, output1);\n"
                                           "    output1 = mad(input1.w, weight3, output1);\n"
                                           "\n"
                                           "    // -------------2--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block2.x, in_pos_in_one_block2.y);\n"
                                           "    half4 input2 = read_imageh(input_image, sampler, pos_in);\n"
                                           "\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input2.y = 0.0f;\n"
                                           "        input2.z = 0.0f;\n"
                                           "        input2.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "    output2 = mad(input2.x, weight0, output2);\n"
                                           "    output2 = mad(input2.y, weight1, output2);\n"
                                           "    output2 = mad(input2.z, weight2, output2);\n"
                                           "    output2 = mad(input2.w, weight3, output2);\n"
                                           "\n"
                                           "    // -------------3--------------\n"
                                           "    pos_in = (int2)(i * input_width + in_pos_in_one_block3.x, in_pos_in_one_block3.y);\n"
                                           "    half4 input3 = read_imageh(input_image, sampler, pos_in);\n"
                                           "    bound_gap = max_w_bound - pos_in.x - 1;\n"
                                           "    if (bound_gap < input_width && bound_gap >= 0){\n"
                                           "      if (burndary_index==0){\n"
                                           "        // do nothing\n"
                                           "      } else if (burndary_index==1){\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==2){\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      } else if (burndary_index==3){\n"
                                           "        input3.y = 0.0f;\n"
                                           "        input3.z = 0.0f;\n"
                                           "        input3.w = 0.0f;\n"
                                           "      }\n"
                                           "    }\n"
                                           "\n"
                                           "    output3 = mad(input3.x, weight0, output3);\n"
                                           "    output3 = mad(input3.y, weight1, output3);\n"
                                           "    output3 = mad(input3.z, weight2, output3);\n"
                                           "    output3 = mad(input3.w, weight3, output3);\n"
                                           "  }\n"
                                           "\n"
                                           "\n"
                                           "#ifdef RELU\n"
                                           "  output0 = activation(output0);\n"
                                           "     output1 = activation(output1);\n"
                                           "     output2 = activation(output2);\n"
                                           "     output3 = activation(output3);\n"
                                           "#endif\n"
                                           "\n"
                                           "  if (out_w0 < old_w) {\n"
                                           "    write_imageh(output_image, output_pos0, output0);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w1 < old_w){\n"
                                           "    write_imageh(output_image, output_pos1, output1);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w2 < old_w){\n"
                                           "    write_imageh(output_image, output_pos2, output2);\n"
                                           "  }\n"
                                           "\n"
                                           "  if (out_w3 < old_w){\n"
                                           "    write_imageh(output_image, output_pos3, output3);\n"
                                           "  }\n"
                                           "}";
}

#endif